// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/snow_resource_controller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSnowResourceController is a mock of SnowResourceController interface.
type MockSnowResourceController struct {
	ctrl     *gomock.Controller
	recorder *MockSnowResourceControllerMockRecorder
}

// MockSnowResourceControllerMockRecorder is the mock recorder for MockSnowResourceController.
type MockSnowResourceControllerMockRecorder struct {
	mock *MockSnowResourceController
}

// NewMockSnowResourceController creates a new mock instance.
func NewMockSnowResourceController(ctrl *gomock.Controller) *MockSnowResourceController {
	mock := &MockSnowResourceController{ctrl: ctrl}
	mock.recorder = &MockSnowResourceControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnowResourceController) EXPECT() *MockSnowResourceControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSnowResourceController) Create(ctx context.Context, name, namespace, operation, kind, payload string, labels map[string]string, generateName bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, namespace, operation, kind, payload, labels, generateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSnowResourceControllerMockRecorder) Create(ctx, name, namespace, operation, kind, payload, labels, generateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSnowResourceController)(nil).Create), ctx, name, namespace, operation, kind, payload, labels, generateName)
}

// Delete mocks base method.
func (m *MockSnowResourceController) Delete(ctx context.Context, name, namespace, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, namespace, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSnowResourceControllerMockRecorder) Delete(ctx, name, namespace, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnowResourceController)(nil).Delete), ctx, name, namespace, operation)
}

// Get mocks base method.
func (m *MockSnowResourceController) Get(ctx context.Context, label, namespace, operation string, bypassStatusCheck bool) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, label, namespace, operation, bypassStatusCheck)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockSnowResourceControllerMockRecorder) Get(ctx, label, namespace, operation, bypassStatusCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSnowResourceController)(nil).Get), ctx, label, namespace, operation, bypassStatusCheck)
}

// Update mocks base method.
func (m *MockSnowResourceController) Update(ctx context.Context, name, namespace, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, name, namespace, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSnowResourceControllerMockRecorder) Update(ctx, name, namespace, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSnowResourceController)(nil).Update), ctx, name, namespace, operation)
}
