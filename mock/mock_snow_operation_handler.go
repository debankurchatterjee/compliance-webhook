// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler/operation_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	controller "github.com/compliance-webhook/pkg/controller"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/admission/v1"
)

// MockoperationHandlerInterface is a mock of operationHandlerInterface interface.
type MockoperationHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockoperationHandlerInterfaceMockRecorder
}

// MockoperationHandlerInterfaceMockRecorder is the mock recorder for MockoperationHandlerInterface.
type MockoperationHandlerInterfaceMockRecorder struct {
	mock *MockoperationHandlerInterface
}

// NewMockoperationHandlerInterface creates a new mock instance.
func NewMockoperationHandlerInterface(ctrl *gomock.Controller) *MockoperationHandlerInterface {
	mock := &MockoperationHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockoperationHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoperationHandlerInterface) EXPECT() *MockoperationHandlerInterfaceMockRecorder {
	return m.recorder
}

// CreateCR mocks base method.
func (m *MockoperationHandlerInterface) CreateCR(ctx context.Context, req *v1.AdmissionRequest, operation, changeIDStr, parentChangeID, name string, byPassPayloadInjection bool, logger logr.Logger, resource controller.SnowResource, generateName bool) (*v1.AdmissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCR", ctx, req, operation, changeIDStr, parentChangeID, name, byPassPayloadInjection, logger, resource, generateName)
	ret0, _ := ret[0].(*v1.AdmissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCR indicates an expected call of CreateCR.
func (mr *MockoperationHandlerInterfaceMockRecorder) CreateCR(ctx, req, operation, changeIDStr, parentChangeID, name, byPassPayloadInjection, logger, resource, generateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCR", reflect.TypeOf((*MockoperationHandlerInterface)(nil).CreateCR), ctx, req, operation, changeIDStr, parentChangeID, name, byPassPayloadInjection, logger, resource, generateName)
}

// GetAndCreateOperationCR mocks base method.
func (m *MockoperationHandlerInterface) GetAndCreateOperationCR(ctx context.Context, req *v1.AdmissionRequest, operation, changeIDStr, namespace string, byPassStatusCheck, byPassPayloadInjection bool, logger logr.Logger, resource controller.SnowResource, ownerReferences []interface{}) (*v1.AdmissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndCreateOperationCR", ctx, req, operation, changeIDStr, namespace, byPassStatusCheck, byPassPayloadInjection, logger, resource, ownerReferences)
	ret0, _ := ret[0].(*v1.AdmissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndCreateOperationCR indicates an expected call of GetAndCreateOperationCR.
func (mr *MockoperationHandlerInterfaceMockRecorder) GetAndCreateOperationCR(ctx, req, operation, changeIDStr, namespace, byPassStatusCheck, byPassPayloadInjection, logger, resource, ownerReferences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndCreateOperationCR", reflect.TypeOf((*MockoperationHandlerInterface)(nil).GetAndCreateOperationCR), ctx, req, operation, changeIDStr, namespace, byPassStatusCheck, byPassPayloadInjection, logger, resource, ownerReferences)
}

// OperationHandlerImpl mocks base method.
func (m *MockoperationHandlerInterface) OperationHandlerImpl(ctx context.Context, req *v1.AdmissionRequest, resource controller.SnowResource, name, operation, namespace, kind string, ownerReferences []interface{}, logger logr.Logger) (*v1.AdmissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationHandlerImpl", ctx, req, resource, name, operation, namespace, kind, ownerReferences, logger)
	ret0, _ := ret[0].(*v1.AdmissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationHandlerImpl indicates an expected call of OperationHandlerImpl.
func (mr *MockoperationHandlerInterfaceMockRecorder) OperationHandlerImpl(ctx, req, resource, name, operation, namespace, kind, ownerReferences, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationHandlerImpl", reflect.TypeOf((*MockoperationHandlerInterface)(nil).OperationHandlerImpl), ctx, req, resource, name, operation, namespace, kind, ownerReferences, logger)
}

// MockoperationHandlerFactory is a mock of operationHandlerFactory interface.
type MockoperationHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockoperationHandlerFactoryMockRecorder
}

// MockoperationHandlerFactoryMockRecorder is the mock recorder for MockoperationHandlerFactory.
type MockoperationHandlerFactoryMockRecorder struct {
	mock *MockoperationHandlerFactory
}

// NewMockoperationHandlerFactory creates a new mock instance.
func NewMockoperationHandlerFactory(ctrl *gomock.Controller) *MockoperationHandlerFactory {
	mock := &MockoperationHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockoperationHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoperationHandlerFactory) EXPECT() *MockoperationHandlerFactoryMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockoperationHandlerFactory) Handle(ctx context.Context, req *v1.AdmissionRequest, operation *v1.Operation, resource controller.SnowResource, name, namespace, kind string, ownerReferences []interface{}, logger logr.Logger) (*v1.AdmissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req, operation, resource, name, namespace, kind, ownerReferences, logger)
	ret0, _ := ret[0].(*v1.AdmissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockoperationHandlerFactoryMockRecorder) Handle(ctx, req, operation, resource, name, namespace, kind, ownerReferences, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockoperationHandlerFactory)(nil).Handle), ctx, req, operation, resource, name, namespace, kind, ownerReferences, logger)
}
